// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.PoliciesImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.PolicyContract;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Initializes a new instance of the synchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class)
public final class PolicyClient {
    private final PoliciesImpl serviceClient;

    /**
     * Initializes an instance of Policies client.
     *
     * @param serviceClient the service client implementation.
     */
    PolicyClient(PoliciesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the Learning Settings currently used by the Personalizer service.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Learning Settings currently used by the Personalizer service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyContract get() {
        return this.serviceClient.get();
    }

    /**
     * Get the Learning Settings currently used by the Personalizer service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Learning Settings currently used by the Personalizer service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PolicyContract> getWithResponse(Context context) {
        return this.serviceClient.getWithResponse(context);
    }

    /**
     * Update the Learning Settings that the Personalizer service will use to train models.
     *
     * @param policy The learning settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return learning settings specifying how to train the model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyContract update(PolicyContract policy) {
        return this.serviceClient.update(policy);
    }

    /**
     * Update the Learning Settings that the Personalizer service will use to train models.
     *
     * @param policy The learning settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return learning settings specifying how to train the model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PolicyContract> updateWithResponse(PolicyContract policy, Context context) {
        return this.serviceClient.updateWithResponse(policy, context);
    }

    /**
     * Resets the learning settings of the Personalizer service to default.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return learning settings specifying how to train the model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyContract reset() {
        return this.serviceClient.reset();
    }

    /**
     * Resets the learning settings of the Personalizer service to default.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return learning settings specifying how to train the model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PolicyContract> resetWithResponse(Context context) {
        return this.serviceClient.resetWithResponse(context);
    }
}
