// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.ServiceConfigurationsImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.PolicyReferenceContract;
import com.azure.ai.personalizer.models.ServiceConfiguration;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class, isAsync = true)
public final class ServiceConfigurationAsyncClient {
    private final ServiceConfigurationsImpl serviceClient;

    /**
     * Initializes an instance of ServiceConfigurations client.
     *
     * @param serviceClient the service client implementation.
     */
    ServiceConfigurationAsyncClient(ServiceConfigurationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the Personalizer service configuration.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Personalizer service configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceConfiguration>> getWithResponse() {
        return this.serviceClient.getWithResponseAsync();
    }

    /**
     * Get the Personalizer service configuration.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Personalizer service configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceConfiguration> get() {
        return this.serviceClient.getAsync();
    }

    /**
     * Update the Personalizer service configuration.
     *
     * @param config The personalizer service configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceConfiguration>> updateWithResponse(ServiceConfiguration config) {
        return this.serviceClient.updateWithResponseAsync(config);
    }

    /**
     * Update the Personalizer service configuration.
     *
     * @param config The personalizer service configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the configuration of the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceConfiguration> update(ServiceConfiguration config) {
        return this.serviceClient.updateAsync(config);
    }

    /**
     * Apply Learning Settings and model from a pre-existing Offline Evaluation, making them the current online Learning
     * Settings and model and replacing the previous ones.
     *
     * @param body Reference to the policy within the evaluation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> applyFromEvaluationWithResponse(PolicyReferenceContract body) {
        return this.serviceClient.applyFromEvaluationWithResponseAsync(body);
    }

    /**
     * Apply Learning Settings and model from a pre-existing Offline Evaluation, making them the current online Learning
     * Settings and model and replacing the previous ones.
     *
     * @param body Reference to the policy within the evaluation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> applyFromEvaluation(PolicyReferenceContract body) {
        return this.serviceClient.applyFromEvaluationAsync(body);
    }
}
