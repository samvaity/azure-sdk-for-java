// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.PersonalizerClientImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.RankRequest;
import com.azure.ai.personalizer.models.RankResponse;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class, isAsync = true)
public final class PersonalizerAsyncClient {
    private final PersonalizerClientImpl serviceClient;

    /**
     * Initializes an instance of PersonalizerClient client.
     *
     * @param serviceClient the service client implementation.
     */
    PersonalizerAsyncClient(PersonalizerClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Submit a Personalizer rank request. Receives a context and a list of actions. Returns which of the provided
     * actions should be used by your application, in rewardActionId.
     *
     * @param rankRequest A Personalizer Rank request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return returns which action to use as rewardActionId, and additional information about each action as a result
     *     of a Rank request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RankResponse>> rankWithResponse(RankRequest rankRequest) {
        return this.serviceClient.rankWithResponseAsync(rankRequest);
    }

    /**
     * Submit a Personalizer rank request. Receives a context and a list of actions. Returns which of the provided
     * actions should be used by your application, in rewardActionId.
     *
     * @param rankRequest A Personalizer Rank request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return returns which action to use as rewardActionId, and additional information about each action as a result
     *     of a Rank request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RankResponse> rank(RankRequest rankRequest) {
        return this.serviceClient.rankAsync(rankRequest);
    }
}
