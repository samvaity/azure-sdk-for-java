// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.LogsImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.LogsProperties;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class, isAsync = true)
public final class LogAsyncClient {
    private final LogsImpl serviceClient;

    /**
     * Initializes an instance of Logs client.
     *
     * @param serviceClient the service client implementation.
     */
    LogAsyncClient(LogsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The endpoint is intended to be used from within a SDK for logging interactions and accepts specific format
     * defined in https://github.com/VowpalWabbit/reinforcement_learning. This endpoint should not be used by the
     * customer.
     *
     * @param body Interactions binary payload.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> interactionsWithResponse(Flux<ByteBuffer> body, long contentLength) {
        return this.serviceClient.interactionsWithResponseAsync(body, contentLength);
    }

    /**
     * The endpoint is intended to be used from within a SDK for logging interactions and accepts specific format
     * defined in https://github.com/VowpalWabbit/reinforcement_learning. This endpoint should not be used by the
     * customer.
     *
     * @param body Interactions binary payload.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> interactions(Flux<ByteBuffer> body, long contentLength) {
        return this.serviceClient.interactionsAsync(body, contentLength);
    }

    /**
     * The endpoint is intended to be used from within a SDK for logging observations and accepts specific format
     * defined in https://github.com/VowpalWabbit/reinforcement_learning. This endpoint should not be used by the
     * customer.
     *
     * @param body Observations binary payload.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> observationsWithResponse(Flux<ByteBuffer> body, long contentLength) {
        return this.serviceClient.observationsWithResponseAsync(body, contentLength);
    }

    /**
     * The endpoint is intended to be used from within a SDK for logging observations and accepts specific format
     * defined in https://github.com/VowpalWabbit/reinforcement_learning. This endpoint should not be used by the
     * customer.
     *
     * @param body Observations binary payload.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> observations(Flux<ByteBuffer> body, long contentLength) {
        return this.serviceClient.observationsAsync(body, contentLength);
    }

    /**
     * Delete all logs of Rank and Reward calls stored by Personalizer.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse() {
        return this.serviceClient.deleteWithResponseAsync();
    }

    /**
     * Delete all logs of Rank and Reward calls stored by Personalizer.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete() {
        return this.serviceClient.deleteAsync();
    }

    /**
     * Get properties of the Personalizer logs.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the Personalizer logs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LogsProperties>> getPropertiesWithResponse() {
        return this.serviceClient.getPropertiesWithResponseAsync();
    }

    /**
     * Get properties of the Personalizer logs.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the Personalizer logs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LogsProperties> getProperties() {
        return this.serviceClient.getPropertiesAsync();
    }
}
