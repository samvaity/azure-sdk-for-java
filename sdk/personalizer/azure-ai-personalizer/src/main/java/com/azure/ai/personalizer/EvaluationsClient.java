// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.EvaluationsImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.Evaluation;
import com.azure.ai.personalizer.models.EvaluationContract;
import com.azure.ai.personalizer.models.EvaluationsCreateResponse;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.util.List;

/** Initializes a new instance of the synchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class)
public final class EvaluationsClient {
    private final EvaluationsImpl serviceClient;

    /**
     * Initializes an instance of Evaluations client.
     *
     * @param serviceClient the service client implementation.
     */
    EvaluationsClient(EvaluationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the Offline Evaluation associated with the Id.
     *
     * @param evaluationId Id of the Offline Evaluation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Offline Evaluation associated with the Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Evaluation get(String evaluationId) {
        return this.serviceClient.get(evaluationId);
    }

    /**
     * Get the Offline Evaluation associated with the Id.
     *
     * @param evaluationId Id of the Offline Evaluation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Offline Evaluation associated with the Id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Evaluation> getWithResponse(String evaluationId, Context context) {
        return this.serviceClient.getWithResponse(evaluationId, context);
    }

    /**
     * Delete the Offline Evaluation associated with the Id.
     *
     * @param evaluationId Id of the Offline Evaluation to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String evaluationId) {
        this.serviceClient.delete(evaluationId);
    }

    /**
     * Delete the Offline Evaluation associated with the Id.
     *
     * @param evaluationId Id of the Offline Evaluation to delete.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String evaluationId, Context context) {
        return this.serviceClient.deleteWithResponse(evaluationId, context);
    }

    /**
     * List of all Offline Evaluations.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Evaluation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<Evaluation> list() {
        return this.serviceClient.list();
    }

    /**
     * List of all Offline Evaluations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Evaluation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<Evaluation>> listWithResponse(Context context) {
        return this.serviceClient.listWithResponse(context);
    }

    /**
     * Submit a new Offline Evaluation job.
     *
     * @param evaluation The Offline Evaluation job definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a counterfactual evaluation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Evaluation create(EvaluationContract evaluation) {
        return this.serviceClient.create(evaluation);
    }

    /**
     * Submit a new Offline Evaluation job.
     *
     * @param evaluation The Offline Evaluation job definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a counterfactual evaluation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EvaluationsCreateResponse createWithResponse(EvaluationContract evaluation, Context context) {
        return this.serviceClient.createWithResponse(evaluation, context);
    }
}
