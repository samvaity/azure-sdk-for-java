// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.EventsImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.RewardRequest;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class, isAsync = true)
public final class EventsAsyncClient {
    private final EventsImpl serviceClient;

    /**
     * Initializes an instance of Events client.
     *
     * @param serviceClient the service client implementation.
     */
    EventsAsyncClient(EventsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Report reward between 0 and 1 that resulted from using the action specified in rewardActionId, for the specified
     * event.
     *
     * @param eventId The event id this reward applies to.
     * @param reward The reward should be a floating point number, typically between 0 and 1.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rewardWithResponse(String eventId, RewardRequest reward) {
        return this.serviceClient.rewardWithResponseAsync(eventId, reward);
    }

    /**
     * Report reward between 0 and 1 that resulted from using the action specified in rewardActionId, for the specified
     * event.
     *
     * @param eventId The event id this reward applies to.
     * @param reward The reward should be a floating point number, typically between 0 and 1.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reward(String eventId, RewardRequest reward) {
        return this.serviceClient.rewardAsync(eventId, reward);
    }

    /**
     * Report that the specified event was actually used (e.g. by being displayed to the user) and a reward should be
     * expected for it.
     *
     * @param eventId The event ID to be activated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> activateWithResponse(String eventId) {
        return this.serviceClient.activateWithResponseAsync(eventId);
    }

    /**
     * Report that the specified event was actually used (e.g. by being displayed to the user) and a reward should be
     * expected for it.
     *
     * @param eventId The event ID to be activated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> activate(String eventId) {
        return this.serviceClient.activateAsync(eventId);
    }
}
