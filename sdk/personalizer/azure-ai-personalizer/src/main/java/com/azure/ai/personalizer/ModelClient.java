// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.ModelsImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.ModelProperties;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import java.io.InputStream;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;

/** Initializes a new instance of the synchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class)
public final class ModelClient {
    private final ModelsImpl serviceClient;

    /**
     * Initializes an instance of Models client.
     *
     * @param serviceClient the service client implementation.
     */
    ModelClient(ModelsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the model file generated by Personalizer service.
     *
     * @param signed True if requesting signed model zip archive, false otherwise.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the model file generated by Personalizer service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream get(Boolean signed) {
        return this.serviceClient.get(signed);
    }

    /**
     * Get the model file generated by Personalizer service.
     *
     * @param signed True if requesting signed model zip archive, false otherwise.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the model file generated by Personalizer service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse getWithResponse(Boolean signed, Context context) {
        return this.serviceClient.getWithResponse(signed, context);
    }

    /**
     * Replace the existing model file for the Personalizer service.
     *
     * @param body The digitally signed model file obtained from getting the model.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void importMethod(Flux<ByteBuffer> body, long contentLength) {
        this.serviceClient.importMethod(body, contentLength);
    }

    /**
     * Replace the existing model file for the Personalizer service.
     *
     * @param body The digitally signed model file obtained from getting the model.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> importMethodWithResponse(Flux<ByteBuffer> body, long contentLength, Context context) {
        return this.serviceClient.importMethodWithResponse(body, contentLength, context);
    }

    /**
     * Resets the model file generated by Personalizer service.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reset() {
        this.serviceClient.reset();
    }

    /**
     * Resets the model file generated by Personalizer service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resetWithResponse(Context context) {
        return this.serviceClient.resetWithResponse(context);
    }

    /**
     * Get properties of the model file generated by Personalizer service.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the model file generated by Personalizer service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ModelProperties getProperties() {
        return this.serviceClient.getProperties();
    }

    /**
     * Get properties of the model file generated by Personalizer service.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the model file generated by Personalizer service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ModelProperties> getPropertiesWithResponse(Context context) {
        return this.serviceClient.getPropertiesWithResponse(context);
    }
}
