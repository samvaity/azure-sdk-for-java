// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.personalizer;

import com.azure.ai.personalizer.implementation.MultiSlotEventsImpl;
import com.azure.ai.personalizer.models.ErrorResponseException;
import com.azure.ai.personalizer.models.MultiSlotRewardRequest;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous PersonalizerClient type. */
@ServiceClient(builder = PersonalizerClientBuilder.class, isAsync = true)
public final class MultiSlotEventsAsyncClient {
    private final MultiSlotEventsImpl serviceClient;

    /**
     * Initializes an instance of MultiSlotEvents client.
     *
     * @param serviceClient the service client implementation.
     */
    MultiSlotEventsAsyncClient(MultiSlotEventsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Report reward that resulted from using the action specified in rewardActionId for the slot.
     *
     * @param eventId The event id this reward applies to.
     * @param body List of slot id and reward values. The reward should be a floating point number, typically between 0
     *     and 1.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rewardWithResponse(String eventId, MultiSlotRewardRequest body) {
        return this.serviceClient.rewardWithResponseAsync(eventId, body);
    }

    /**
     * Report reward that resulted from using the action specified in rewardActionId for the slot.
     *
     * @param eventId The event id this reward applies to.
     * @param body List of slot id and reward values. The reward should be a floating point number, typically between 0
     *     and 1.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reward(String eventId, MultiSlotRewardRequest body) {
        return this.serviceClient.rewardAsync(eventId, body);
    }

    /**
     * Report that the specified event was actually used or displayed to the user and a rewards should be expected for
     * it.
     *
     * @param eventId The event ID this activation applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> activateWithResponse(String eventId) {
        return this.serviceClient.activateWithResponseAsync(eventId);
    }

    /**
     * Report that the specified event was actually used or displayed to the user and a rewards should be expected for
     * it.
     *
     * @param eventId The event ID this activation applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> activate(String eventId) {
        return this.serviceClient.activateAsync(eventId);
    }
}
