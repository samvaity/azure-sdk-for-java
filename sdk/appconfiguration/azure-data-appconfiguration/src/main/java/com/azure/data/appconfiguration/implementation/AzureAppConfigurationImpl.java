// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.data.appconfiguration.implementation;

import com.azure.data.appconfiguration.implementation.models.CheckKeyValueHeaders;
import com.azure.data.appconfiguration.implementation.models.CheckKeyValuesHeaders;
import com.azure.data.appconfiguration.implementation.models.CheckKeysHeaders;
import com.azure.data.appconfiguration.implementation.models.CheckLabelsHeaders;
import com.azure.data.appconfiguration.implementation.models.CheckRevisionsHeaders;
import com.azure.data.appconfiguration.implementation.models.CheckSnapshotHeaders;
import com.azure.data.appconfiguration.implementation.models.CheckSnapshotsHeaders;
import com.azure.data.appconfiguration.implementation.models.CreateSnapshotHeaders;
import com.azure.data.appconfiguration.implementation.models.DeleteKeyValueHeaders;
import com.azure.data.appconfiguration.implementation.models.DeleteLockHeaders;
import com.azure.data.appconfiguration.implementation.models.GetKeyValueHeaders;
import com.azure.data.appconfiguration.implementation.models.GetKeyValuesHeaders;
import com.azure.data.appconfiguration.implementation.models.GetKeyValuesNextHeaders;
import com.azure.data.appconfiguration.implementation.models.GetKeysHeaders;
import com.azure.data.appconfiguration.implementation.models.GetKeysNextHeaders;
import com.azure.data.appconfiguration.implementation.models.GetLabelsHeaders;
import com.azure.data.appconfiguration.implementation.models.GetLabelsNextHeaders;
import com.azure.data.appconfiguration.implementation.models.GetRevisionsHeaders;
import com.azure.data.appconfiguration.implementation.models.GetRevisionsNextHeaders;
import com.azure.data.appconfiguration.implementation.models.GetSnapshotHeaders;
import com.azure.data.appconfiguration.implementation.models.GetSnapshotsHeaders;
import com.azure.data.appconfiguration.implementation.models.GetSnapshotsNextHeaders;
import com.azure.data.appconfiguration.implementation.models.KeyListResult;
import com.azure.data.appconfiguration.implementation.models.KeyValue;
import com.azure.data.appconfiguration.implementation.models.KeyValueListResult;
import com.azure.data.appconfiguration.implementation.models.LabelFields;
import com.azure.data.appconfiguration.implementation.models.LabelListResult;
import com.azure.data.appconfiguration.implementation.models.OperationDetails;
import com.azure.data.appconfiguration.implementation.models.PutLockHeaders;
import com.azure.data.appconfiguration.implementation.models.SnapshotListResult;
import com.azure.data.appconfiguration.implementation.models.SnapshotUpdateParameters;
import com.azure.data.appconfiguration.implementation.models.UpdateSnapshotHeaders;
import com.azure.data.appconfiguration.models.ConfigurationSnapshot;
import com.azure.data.appconfiguration.models.SettingFields;
import com.azure.data.appconfiguration.models.SnapshotFields;
import io.clientcore.core.annotation.ReturnType;
import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.annotation.ServiceMethod;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.QueryParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.util.Context;
import io.clientcore.core.util.serializer.ObjectSerializer;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the AzureAppConfiguration type.
 */
public final class AzureAppConfigurationImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureAppConfigurationService service;

    /**
     * Used to guarantee real-time consistency between requests.
     */
    private final String syncToken;

    /**
     * Gets Used to guarantee real-time consistency between requests.
     *
     * @return the syncToken value.
     */
    public String getSyncToken() {
        return this.syncToken;
    }

    /**
     * The endpoint of the App Configuration instance to send requests to.
     */
    private final String endpoint;

    /**
     * Gets The endpoint of the App Configuration instance to send requests to.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    private final ObjectSerializer serializer;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public ObjectSerializer getSerializer() {
        return this.serializer;
    }

    /**
     * Initializes an instance of AzureAppConfiguration client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param syncToken    Used to guarantee real-time consistency between requests.
     * @param endpoint     The endpoint of the App Configuration instance to send requests to.
     * @param apiVersion   Api Version.
     */
    public AzureAppConfigurationImpl(HttpPipeline httpPipeline, String syncToken, String endpoint, String apiVersion) {
        this(httpPipeline, serializer, syncToken, endpoint, apiVersion);
    }

    /**
     * Initializes an instance of AzureAppConfiguration client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializer   The serializer to serialize an object into a string.
     * @param syncToken    Used to guarantee real-time consistency between requests.
     * @param endpoint     The endpoint of the App Configuration instance to send requests to.
     * @param apiVersion   Api Version.
     */
    public AzureAppConfigurationImpl(
        HttpPipeline httpPipeline,
        ObjectSerializer serializer,
        String syncToken,
        String endpoint,
        String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializer = serializer;
        this.syncToken = syncToken;
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.service =
            RestProxy.create(AzureAppConfigurationService.class, this.httpPipeline, this.getSerializer());
    }

    /**
     * The interface defining all the services for AzureAppConfiguration to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "AzureAppConfiguratio", host = "{endpoint}")
    public interface AzureAppConfigurationService {

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/keys")
        ResponseBase<GetKeysHeaders, KeyListResult> getKeysSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.HEAD,
            expectedStatusCodes = 200,
            path = "/keys")
        ResponseBase<CheckKeysHeaders, Void> checkKeysSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/kv")
        ResponseBase<GetKeyValuesHeaders, KeyValueListResult> getKeyValuesSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @QueryParam("snapshot") String snapshot,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.HEAD,
            expectedStatusCodes = 200,
            path = "/kv")
        ResponseBase<CheckKeyValuesHeaders, Void> checkKeyValuesSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @QueryParam("snapshot") String snapshot,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/kv/{key}")
        ResponseBase<GetKeyValueHeaders, KeyValue> getKeyValueSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam("$Select") String select,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.PUT,
            expectedStatusCodes = 200,
            path = "/kv/{key}")
        Response<KeyValue> putKeyValueSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") KeyValue entity,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            expectedStatusCodes = {200, 204},
            path = "/kv/{key}")
        ResponseBase<DeleteKeyValueHeaders, KeyValue> deleteKeyValueSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.HEAD,
            expectedStatusCodes = 200,
            path = "/kv/{key}")
        ResponseBase<CheckKeyValueHeaders, Void> checkKeyValueSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam("$Select") String select,
            Context context);


        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/snapshots")
        ResponseBase<GetSnapshotsHeaders, SnapshotListResult> getSnapshotsSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @QueryParam("$Select") String select,
            @QueryParam("status") String status,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/snapshots")
        ResponseBase<CheckSnapshotsHeaders, Void> checkSnapshotsSync(
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/snapshots/{name}")
        ResponseBase<GetSnapshotHeaders, ConfigurationSnapshot> getSnapshotSync(
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam("$Select") String select,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.PUT,
            expectedStatusCodes = 201,
            path = "/snapshots/{name}")
        ResponseBase<CreateSnapshotHeaders, ConfigurationSnapshot> createSnapshotSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ConfigurationSnapshot entity,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            expectedStatusCodes = 200,
            path = "/snapshots/{name}")
        ResponseBase<UpdateSnapshotHeaders, ConfigurationSnapshot> updateSnapshotSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") SnapshotUpdateParameters entity,
            @HeaderParam("Accept") String accept,
            Context context);


        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.HEAD,
            expectedStatusCodes = 200,
            path = "/snapshots/{name}")
        ResponseBase<CheckSnapshotHeaders, Void> checkSnapshotSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/labels")
        ResponseBase<GetLabelsHeaders, LabelListResult> getLabelsSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.HEAD,
            expectedStatusCodes = 200,
            path = "/labels")
        ResponseBase<CheckLabelsHeaders, Void> checkLabelsSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/locks/{key}")
        ResponseBase<PutLockHeaders, KeyValue> putLockSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.DELETE,
            expectedStatusCodes = 200,
            path = "/locks/{key}")
        ResponseBase<DeleteLockHeaders, KeyValue> deleteLockSync(
            @HostParam("endpoint") String endpoint,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/revisions")
        ResponseBase<GetRevisionsHeaders, KeyValueListResult> getRevisionsSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.HEAD,
            expectedStatusCodes = 200,
            path = "/revisions")
        ResponseBase<CheckRevisionsHeaders, Void> checkRevisionsSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("key") String key,
            @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/operations")
        Response<OperationDetails> getOperationDetailsSync(
            @HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("snapshot") String snapshot,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "{nextLink}")
        ResponseBase<GetKeysNextHeaders, KeyListResult> getKeysNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "{nextLink}")
        ResponseBase<GetKeyValuesNextHeaders, KeyValueListResult> getKeyValuesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "{nextLink}")
        ResponseBase<GetSnapshotsNextHeaders, SnapshotListResult> getSnapshotsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept") String accept,
            Context context);


        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail
        @HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "{nextLink}")
        ResponseBase<GetLabelsNextHeaders, LabelListResult> getLabelsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept,
            Context context);

        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = {401})
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = {409})
        @UnexpectedResponseExceptionDetail@HttpRequestInformation(
            method = HttpMethod.GET,
            expectedStatusCodes = 200,
            path = "/keys")
        ResponseBase<GetRevisionsNextHeaders, KeyValueListResult> getRevisionsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint,
            @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name           A filter for the name of the returned keys.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param context        The context to associate with this operation.
     * @return the {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<CheckKeysHeaders, Void> checkKeysWithResponse(
        String name, String after, String acceptDatetime, Context context) {
        return service.checkKeysSync(
            this.getEndpoint(), name, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime, context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name           A filter for the name of the returned keys.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeys(String name, String after, String acceptDatetime) {
        checkKeysWithResponse(name, after, acceptDatetime, Context.empty());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key            A filter used to match keys.
     * @param label          A filter used to match labels.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @param snapshot       A filter used get key-values for a snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch        Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch    Used to perform an operation only if the targeted resource's etag does not match the value
     *                       provided.
     * @param context        The context to associate with this operation.
     * @return the {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<CheckKeyValuesHeaders, Void> checkKeyValuesWithResponse(
        String key,
        String label,
        String after,
        String acceptDatetime,
        List<SettingFields> select,
        String snapshot,
        String ifMatch,
        String ifNoneMatch,
        Context context) {
        String selectConverted =
            (select == null)
                ? null
                : select.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        return service.checkKeyValuesSync(
            this.getEndpoint(),
            key,
            label,
            this.getSyncToken(),
            this.getApiVersion(),
            after,
            acceptDatetime,
            selectConverted,
            snapshot,
            ifMatch,
            ifNoneMatch,
            context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key            A filter used to match keys.
     * @param label          A filter used to match labels.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @param snapshot       A filter used get key-values for a snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch        Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch    Used to perform an operation only if the targeted resource's etag does not match the value
     *                       provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValues(
        String key,
        String label,
        String after,
        String acceptDatetime,
        List<SettingFields> select,
        String snapshot,
        String ifMatch,
        String ifNoneMatch) {
        checkKeyValuesWithResponse(
            key, label, after, acceptDatetime, select, snapshot, ifMatch, ifNoneMatch, Context.empty());
    }

    /**
     * Gets a single key-value.
     *
     * @param key            The key of the key-value to retrieve.
     * @param label          The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch        Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch    Used to perform an operation only if the targeted resource's etag does not match the value
     *                       provided.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @param context        The context to associate with this operation.
     * @return a single key-value along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<GetKeyValueHeaders, KeyValue> getKeyValueWithResponse(
        String key,
        String label,
        String acceptDatetime,
        String ifMatch,
        String ifNoneMatch,
        List<SettingFields> select,
        Context context) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        String selectConverted =
            (select == null)
                ? null
                : select.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        return service.getKeyValueSync(
            this.getEndpoint(),
            key,
            label,
            this.getSyncToken(),
            this.getApiVersion(),
            acceptDatetime,
            ifMatch,
            ifNoneMatch,
            selectConverted,
            accept,
            context);
    }

    /**
     * Gets a single key-value.
     *
     * @param key            The key of the key-value to retrieve.
     * @param label          The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch        Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch    Used to perform an operation only if the targeted resource's etag does not match the value
     *                       provided.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @return a single key-value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue getKeyValue(
        String key,
        String label,
        String acceptDatetime,
        String ifMatch,
        String ifNoneMatch,
        List<SettingFields> select) {
        return getKeyValueWithResponse(key, label, acceptDatetime, ifMatch, ifNoneMatch, select, Context.empty())
            .getValue();
    }

    /**
     * Creates a key-value.
     *
     * @param key         The key of the key-value to create.
     * @param label       The label of the key-value to create.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param entity      The key-value to create.
     * @param context     The context to associate with this operation.
     * @return the response body along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> putKeyValueWithResponse(
        String key, String label, String ifMatch, String ifNoneMatch, KeyValue entity, Context context) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.putKeyValueSync(
            this.getEndpoint(),
            key,
            label,
            this.getSyncToken(),
            this.getApiVersion(),
            ifMatch,
            ifNoneMatch,
            entity,
            accept,
            context);
    }

    /**
     * Creates a key-value.
     *
     * @param key         The key of the key-value to create.
     * @param label       The label of the key-value to create.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param entity      The key-value to create.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putKeyValue(String key, String label, String ifMatch, String ifNoneMatch, KeyValue entity) {
        return putKeyValueWithResponse(key, label, ifMatch, ifNoneMatch, entity, Context.empty()).getValue();
    }

    /**
     * Deletes a key-value.
     *
     * @param key     The key of the key-value to delete.
     * @param label   The label of the key-value to delete.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param context The context to associate with this operation.
     * @return the response body along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<DeleteKeyValueHeaders, KeyValue> deleteKeyValueWithResponse(
        String key, String label, String ifMatch, Context context) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.deleteKeyValueSync(
            this.getEndpoint(), key, label, this.getSyncToken(), this.getApiVersion(), ifMatch, accept, context);
    }

    /**
     * Deletes a key-value.
     *
     * @param key     The key of the key-value to delete.
     * @param label   The label of the key-value to delete.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteKeyValue(String key, String label, String ifMatch) {
        return deleteKeyValueWithResponse(key, label, ifMatch, Context.empty()).getValue();
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key            The key of the key-value to retrieve.
     * @param label          The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch        Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch    Used to perform an operation only if the targeted resource's etag does not match the value
     *                       provided.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @param context        The context to associate with this operation.
     * @return the {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<CheckKeyValueHeaders, Void> checkKeyValueWithResponse(
        String key,
        String label,
        String acceptDatetime,
        String ifMatch,
        String ifNoneMatch,
        List<SettingFields> select,
        Context context) {
        String selectConverted =
            (select == null)
                ? null
                : select.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        return service.checkKeyValueSync(
            this.getEndpoint(),
            key,
            label,
            this.getSyncToken(),
            this.getApiVersion(),
            acceptDatetime,
            ifMatch,
            ifNoneMatch,
            selectConverted,
            context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key            The key of the key-value to retrieve.
     * @param label          The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch        Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch    Used to perform an operation only if the targeted resource's etag does not match the value
     *                       provided.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValue(
        String key,
        String label,
        String acceptDatetime,
        String ifMatch,
        String ifNoneMatch,
        List<SettingFields> select) {
        checkKeyValueWithResponse(key, label, acceptDatetime, ifMatch, ifNoneMatch, select, Context.empty());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param after   Instructs the server to return elements that appear after the element referred to by the specified
     *                token.
     * @param context The context to associate with this operation.
     * @return the {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<CheckSnapshotsHeaders, Void> checkSnapshotsWithResponse(String after, Context context) {
        return service.checkSnapshotsSync(
            this.getEndpoint(), this.getSyncToken(), this.getApiVersion(), after, context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     *              token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshots(String after) {
        checkSnapshotsWithResponse(after, Context.empty());
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name        The name of the key-value snapshot to retrieve.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param select      Used to select what fields are present in the returned resource(s).
     * @param context     The context to associate with this operation.
     * @return a single key-value snapshot along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<GetSnapshotHeaders, ConfigurationSnapshot> getSnapshotWithResponse(
        String name, String ifMatch, String ifNoneMatch, List<SnapshotFields> select, Context context) {
        final String accept = "application/vnd.microsoft.appconfig.snapshot+json, application/problem+json";
        String selectConverted =
            (select == null)
                ? null
                : select.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        return service.getSnapshotSync(
            this.getEndpoint(),
            this.getSyncToken(),
            this.getApiVersion(),
            name,
            ifMatch,
            ifNoneMatch,
            selectConverted,
            accept,
            context);
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name        The name of the key-value snapshot to retrieve.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param select      Used to select what fields are present in the returned resource(s).
     * @return a single key-value snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot getSnapshot(
        String name, String ifMatch, String ifNoneMatch, List<SnapshotFields> select) {
        return getSnapshotWithResponse(name, ifMatch, ifNoneMatch, select, Context.empty()).getValue();
    }

    /**
     * Creates a key-value snapshot.
     *
     * @param name    The name of the key-value snapshot to create.
     * @param entity  The key-value snapshot to create.
     * @param context The context to associate with this operation.
     * @return the response body along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<CreateSnapshotHeaders, ConfigurationSnapshot> createSnapshotWithResponse(
        String name, ConfigurationSnapshot entity, Context context) {
        final String accept = "application/vnd.microsoft.appconfig.snapshot+json, application/problem+json";
        return service.createSnapshotSync(
            this.getEndpoint(), name, this.getSyncToken(), this.getApiVersion(), entity, accept, context);
    }

    /**
     * Creates a key-value snapshot.
     *
     * @param name   The name of the key-value snapshot to create.
     * @param entity The key-value snapshot to create.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot createSnapshot(String name, ConfigurationSnapshot entity) {
        return createSnapshotWithResponse(name, entity, Context.empty()).getValue();
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param name        The name of the key-value snapshot to update.
     * @param entity      The parameters used to update the snapshot.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param context     The context to associate with this operation.
     * @return the response body along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<UpdateSnapshotHeaders, ConfigurationSnapshot> updateSnapshotWithResponse(
        String name, SnapshotUpdateParameters entity, String ifMatch, String ifNoneMatch, Context context) {
        final String accept = "application/vnd.microsoft.appconfig.snapshot+json, application/problem+json";
        return service.updateSnapshotSync(
            this.getEndpoint(),
            name,
            this.getSyncToken(),
            this.getApiVersion(),
            ifMatch,
            ifNoneMatch,
            entity,
            accept,
            context);
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param name        The name of the key-value snapshot to update.
     * @param entity      The parameters used to update the snapshot.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot updateSnapshot(
        String name, SnapshotUpdateParameters entity, String ifMatch, String ifNoneMatch) {
        return updateSnapshotWithResponse(name, entity, ifMatch, ifNoneMatch, Context.empty()).getValue();
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name        The name of the key-value snapshot to check.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param context     The context to associate with this operation.
     * @return the {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<CheckSnapshotHeaders, Void> checkSnapshotWithResponse(
        String name, String ifMatch, String ifNoneMatch, Context context) {
        return service.checkSnapshotSync(
            this.getEndpoint(), name, this.getSyncToken(), this.getApiVersion(), ifMatch, ifNoneMatch, context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name        The name of the key-value snapshot to check.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshot(String name, String ifMatch, String ifNoneMatch) {
        checkSnapshotWithResponse(name, ifMatch, ifNoneMatch, Context.empty());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name           A filter for the name of the returned labels.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @param context        The context to associate with this operation.
     * @return the {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<CheckLabelsHeaders, Void> checkLabelsWithResponse(
        String name, String after, String acceptDatetime, List<LabelFields> select, Context context) {
        String selectConverted =
            (select == null)
                ? null
                : select.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        return service.checkLabelsSync(
            this.getEndpoint(),
            name,
            this.getSyncToken(),
            this.getApiVersion(),
            after,
            acceptDatetime,
            selectConverted,
            context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name           A filter for the name of the returned labels.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkLabels(String name, String after, String acceptDatetime, List<LabelFields> select) {
        checkLabelsWithResponse(name, after, acceptDatetime, select, Context.empty());
    }


    /**
     * Locks a key-value.
     *
     * @param key         The key of the key-value to lock.
     * @param label       The label, if any, of the key-value to lock.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param context     The context to associate with this operation.
     * @return the response body along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<PutLockHeaders, KeyValue> putLockWithResponse(
        String key, String label, String ifMatch, String ifNoneMatch, Context context) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.putLockSync(
            this.getEndpoint(),
            key,
            label,
            this.getSyncToken(),
            this.getApiVersion(),
            ifMatch,
            ifNoneMatch,
            accept,
            context);
    }

    /**
     * Locks a key-value.
     *
     * @param key         The key of the key-value to lock.
     * @param label       The label, if any, of the key-value to lock.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putLock(String key, String label, String ifMatch, String ifNoneMatch) {
        return putLockWithResponse(key, label, ifMatch, ifNoneMatch, Context.empty()).getValue();
    }

    /**
     * Unlocks a key-value.
     *
     * @param key         The key of the key-value to unlock.
     * @param label       The label, if any, of the key-value to unlock.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @param context     The context to associate with this operation.
     * @return the response body along with {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<DeleteLockHeaders, KeyValue> deleteLockWithResponse(
        String key, String label, String ifMatch, String ifNoneMatch, Context context) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.deleteLockSync(
            this.getEndpoint(),
            key,
            label,
            this.getSyncToken(),
            this.getApiVersion(),
            ifMatch,
            ifNoneMatch,
            accept,
            context);
    }

    /**
     * Unlocks a key-value.
     *
     * @param key         The key of the key-value to unlock.
     * @param label       The label, if any, of the key-value to unlock.
     * @param ifMatch     Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     *                    provided.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteLock(String key, String label, String ifMatch, String ifNoneMatch) {
        return deleteLockWithResponse(key, label, ifMatch, ifNoneMatch, Context.empty()).getValue();
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key            A filter used to match keys.
     * @param label          A filter used to match labels.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @param context        The context to associate with this operation.
     * @return the {@link ResponseBase}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkRevisionsWithResponse(
        String key,
        String label,
        String after,
        String acceptDatetime,
        List<SettingFields> select,
        Context context) {
        String selectConverted =
            (select == null)
                ? null
                : select.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        return service.checkRevisionsSync(
            this.getEndpoint(),
            key,
            label,
            this.getSyncToken(),
            this.getApiVersion(),
            after,
            acceptDatetime,
            selectConverted,
            context);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key            A filter used to match keys.
     * @param label          A filter used to match labels.
     * @param after          Instructs the server to return elements that appear after the element referred to by the specified
     *                       token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select         Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkRevisions(
        String key, String label, String after, String acceptDatetime, List<SettingFields> select) {
        checkRevisionsWithResponse(key, label, after, acceptDatetime, select, Context.empty());
    }

    /**
     * Gets the state of a long running operation.
     *
     * @param snapshot Snapshot identifier for the long running operation.
     * @param context  The context to associate with this operation.
     * @return the state of a long running operation along with {@link Response}.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationDetails> getOperationDetailsWithResponse(String snapshot, Context context) {
        final String accept = "application/json";
        return service.getOperationDetailsSync(this.getEndpoint(), this.getApiVersion(), snapshot, accept, context);
    }

    /**
     * Gets the state of a long running operation.
     *
     * @param snapshot Snapshot identifier for the long running operation.
     * @return the state of a long running operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException    thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationDetails getOperationDetails(String snapshot) {
        return getOperationDetailsWithResponse(snapshot, Context.empty()).getValue();
    }
}
